{"componentChunkName":"component---src-templates-post-js","path":"/articles/using-dry-in-symfony2-entities/","result":{"data":{"site":{"siteMetadata":{"title":"Jabran Rafique - Software Engineer (Web)","author":"Jabran Rafique"}},"markdownRemark":{"id":"a4062ce0-cacf-5130-8146-5fe821513419","excerpt":"Such mapped entities sometimes share same attributes between them i.e. ,  etc. In order to use DRY concept here we can create a base entity and then every new…","html":"<p class=\"lead\">This is an effort to make Symfony2 workflow (bit more) DRY where Entities are mapped with Doctrine ORM.</p>\n<p>Such mapped entities sometimes share same attributes between them i.e. <code class=\"language-text\">id</code>, <code class=\"language-text\">timestamps</code> etc. In order to use <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY concept</a> here we can create a base entity and then every new entity can extend it to share those attributes. Let’s start by creating two entities with repeated attributes.</p>\n<blockquote>\n<p>An Entity is simply a PHP class.</p>\n</blockquote>\n<p>Here are two Entities <code class=\"language-text\">User</code> and <code class=\"language-text\">Address</code>, and they are structured as following:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo<span class=\"token punctuation\">\\</span>Bar<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>ORM<span class=\"token punctuation\">\\</span>Mapping</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * @ORM\\Entity\n   * @ORM\\Table(name=\"app_user\")\n   */</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"id\", type=\"integer\")\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"name\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"email\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"createdAt\", type=\"datetime\")\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$createdAt</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"updatedAt\", type=\"datetime\")\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$updatedAt</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// getter setters</span>\n  <span class=\"token punctuation\">}</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here is the <code class=\"language-text\">Address</code> entity class.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo<span class=\"token punctuation\">\\</span>Bar<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>ORM<span class=\"token punctuation\">\\</span>Mapping</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * @ORM\\Entity\n   * @ORM\\Table(name=\"app_address\")\n   */</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"id\", type=\"integer\")\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"property\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$property</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"street\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$street</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"town\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$town</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"createdAt\", type=\"datetime\")\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$createdAt</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"updatedAt\", type=\"datetime\")\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$updatedAt</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// getter setters</span>\n  <span class=\"token punctuation\">}</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>As you can see that we have <code class=\"language-text\">id</code>, <code class=\"language-text\">createdAt</code> and <code class=\"language-text\">updatedAt</code> attributes that are being repeated in both entities. To implement a DRY concept here we are going to create a new entity class that will have the shared/repeated attributes and then can be extended by other entities.</p>\n<p>Let’s create a <code class=\"language-text\">BaseEntity</code> class and move the repeated values to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo<span class=\"token punctuation\">\\</span>Bar<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>ORM<span class=\"token punctuation\">\\</span>Mapping</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ORM\\MappedSuperclass\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Id\n     * @ORM\\Column(name=\"id\", type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"created_at\", type=\"datetime\")\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$createdAt</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"updated_at\", type=\"datetime\")\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$updatedAt</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// getters setters</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Note a new annotation <code class=\"language-text\">@ORM\\MappedSuperclass</code> at top of the <code class=\"language-text\">BaseEntity</code> that makes sure that attributes in this entity are properly extended into sub-entities. Now we can remove these attributes from <code class=\"language-text\">User</code> and <code class=\"language-text\">Address</code> entities and extend our <code class=\"language-text\">BaseEntity</code> class into these.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo<span class=\"token punctuation\">\\</span>Bar<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>ORM<span class=\"token punctuation\">\\</span>Mapping</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * @ORM\\Entity\n   * @ORM\\Table(name=\"app_user\")\n   */</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"name\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"email\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// getter setters</span>\n  <span class=\"token punctuation\">}</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo<span class=\"token punctuation\">\\</span>Bar<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>ORM<span class=\"token punctuation\">\\</span>Mapping</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * @ORM\\Entity\n   * @ORM\\Table(name=\"app_address\")\n   */</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"property\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$property</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"street\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$street</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\Column(name=\"town\", type=\"string\", length=255)\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$town</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">// getter setters</span>\n  <span class=\"token punctuation\">}</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Our entities are already started to look cleaner.</p>\n<p>Now since we have some shared attributes in one entity, this gives us flexibility to add further enhancements to it as required.</p>\n<p>Let’s add some automation to make sure that both timestamps <code class=\"language-text\">createdAt</code> and <code class=\"language-text\">updatedAt</code> are properly set before we persist or update the records to our database. For that we will use <code class=\"language-text\">@ORM\\PrePersist</code> and <code class=\"language-text\">@ORM\\PreUpdate</code> annotations in custom methods. We also need an additional annotation <code class=\"language-text\">@ORM\\HasLifecycleCallbacks</code> at class root level.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo<span class=\"token punctuation\">\\</span>Bar<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>ORM<span class=\"token punctuation\">\\</span>Mapping</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ORM\\HasLifecycleCallbacks\n * @ORM\\MappedSuperclass\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\PrePersist\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setTimestamps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">createdAt</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>DateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">updatedAt</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>DateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @ORM\\PreUpdate\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setUpdatedTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">updatedAt</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>DateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now we have two additional custom methods, <code class=\"language-text\">setTimestamps</code> and <code class=\"language-text\">setUpdatedTimestamp</code>. The names for these methods do not really matter so we can name those as we want. First method sets the values for <code class=\"language-text\">createdAt</code> and <code class=\"language-text\">updatedAt</code> attributes just before we <strong>persist a new record</strong> to database. We set the values as <code class=\"language-text\">DateTime</code> object and Symfony2/Doctrine will automatically convert those to required format for database entry. Second method only updates the <code class=\"language-text\">updatedAt</code> value when a database <strong>record is updated</strong>.</p>\n<blockquote>\n<p>We can simply extend the <code class=\"language-text\">BaseEntity</code> to any entity and need not worry about generating a primary key attribute (<code class=\"language-text\">id</code>) and timestamps now on.</p>\n</blockquote>\n<h3>Additional enhancements:</h3>\n<p>We can have as many as enhancement we like to the <code class=\"language-text\">BaseEntity</code> and those will be automatically extended to sub-entities. For example we can have a <code class=\"language-text\">save</code> method to persist the record by keeping all logic in <code class=\"language-text\">BaseEntity</code> instead of a controller. In current situation if we are creating a user we will use following steps inside a controller:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo@bar.co'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token variable\">$em</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getDoctrine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$em</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$em</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>By adding following helper method into our <code class=\"language-text\">BaseEntity</code> we can shorten it from 3 lines to 1:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo<span class=\"token punctuation\">\\</span>Bar<span class=\"token punctuation\">\\</span>Entity</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Doctrine<span class=\"token punctuation\">\\</span>ORM<span class=\"token punctuation\">\\</span>Mapping</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">ORM</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @ORM\\HasLifecycleCallbacks\n * @ORM\\MappedSuperclass\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseEntity</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token comment\">/**\n     * Helper method\n     *\n     * @param Doctrine\\ORM\\EntityManager $em\n     * @throws \\RunTimeException\n     * @return void\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>EntityManager <span class=\"token variable\">$em</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$em</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">EntityManager</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>RunTimeException</span><span class=\"token punctuation\">(</span>\n          <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Expected an instance of  Doctrine\\ORM\\EntityManager but got \"%s\"'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">gettype</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$em</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token variable\">$em</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token variable\">$em</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now we can simply use the <code class=\"language-text\">save</code> method inside our controller:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo@bar.co'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\">  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token variable\">$addr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$addr</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$addr</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setStreet</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Foo Road'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token variable\">$addr</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setTown</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Fondon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token variable\">$addr</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I hope that this was useful for anyone refactoring their Symfony2 project. Here is the complete <a href=\"https://gist.github.com/jabranr/e74b80958a997ffc62b8f8173b7a1e3e\">BaseEntity class as a Gist</a>. Feel free to suggest any enhancements.</p>","timeToRead":5,"frontmatter":{"title":"Using DRY concept in Symfony2 Entities","code":null,"date":"July 25, 2016"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/articles/using-dry-in-symfony2-entities/","previous":{"fields":{"slug":"/articles/secret-sauces-of-git/"},"frontmatter":{"title":"Secret sauces of Git","permalink":null}},"next":{"fields":{"slug":"/projects/postcodes-io/"},"frontmatter":{"title":"PHP library for postcodes.io API","permalink":null}}}}}