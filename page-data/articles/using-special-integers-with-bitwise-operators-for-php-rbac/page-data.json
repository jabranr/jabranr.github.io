{"componentChunkName":"component---src-templates-post-js","path":"/articles/using-special-integers-with-bitwise-operators-for-php-rbac/","result":{"data":{"site":{"siteMetadata":{"title":"Jabran Rafique - Software Engineer (Web)","author":"Jabran Rafique"}},"markdownRemark":{"id":"bffe4fac-3613-50d8-9243-0ef6b043a439","excerpt":"Recently, while working on a project that incorporates a custom Content Management System (CMS), I came across building the complex system of Role-Based Access…","html":"<p>Recently, while working on a project that incorporates a custom Content Management System (CMS), I came across building the complex system of <a href=\"http://en.wikipedia.org/wiki/RBAC\">Role-Based Access Control (RBAC)</a>. The core base of these Roles were the permissions of various types i.e. create, modify, remove, read-only etc.</p>\n<p>The very first method that came to my mind to build this system was from a book I read a couple of years ago titled as <a href=\"http://www.wrox.com/WileyCDA/WroxTitle/productCd-0470192429.html\">PHP and MySQL Create Modify Reuse</a> published by Wrox Press. This method included the clever use of <a href=\"http://en.wikipedia.org/wiki/Bitwise_operation\">Bitwise Operations</a> to assign one or more permissions to a Role. This was probably the first time when I was interested in Binary system of computing.</p>\n<p>Since I had more than 12 types of permissions to assign to various Roles, I thought it would be useful to have a list of special integers in hand. So I made following small PHP function and ran it through browser to get the list of special integers.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token operator\">/</span>\\<span class=\"token operator\">*</span>\\<span class=\"token operator\">*</span>\n\n<span class=\"token operator\">-</span> Converts the integer to binary <span class=\"token keyword\">and</span> outputs <span class=\"token keyword\">list</span> of integers that are power of <span class=\"token number\">2</span>\n<span class=\"token operator\">-</span> @param<span class=\"token punctuation\">:</span> Integer\n<span class=\"token operator\">-</span> @<span class=\"token keyword\">return</span><span class=\"token punctuation\">:</span> String\n  \\<span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">get_special_binary</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$decimal</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">$binaries</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$decimal</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      \t<span class=\"token variable\">$special_num</span> <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \t<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_pad</span><span class=\"token punctuation\">(</span><span class=\"token function\">base_convert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$special_num</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STR_PAD_LEFT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$binaries</span> <span class=\"token punctuation\">.</span><span class=\"token operator\">=</span> <span class=\"token variable\">$special_num</span> <span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\" = \"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\" \"</span> <span class=\"token punctuation\">.</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'&lt;br>'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token variable\">$binaries</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I thought it might also be helpful for anyone else so I have put it on <a href=\"https://gist.github.com/jabranr/7406258\">Github Gist</a>. Please feel free to use it to do wonders.</p>\n<h3>So what exactly are special integers?</h3>\n<p>Special integers are special in way because they are power of 2 i.e. <code class=\"language-text\">2, 4, 8, 16</code> and so on. These special integers return amazing outcome due to their Binary structure when they are used with Bitwise operators. By analysing the following list of integers you can see that these integers (1, 2, 4, 8, 16) have only one digit “1” in their structure when converted to Binary.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1 – 0000 0001\n2 – 0000 0010\n3 – 0000 0011\n4 – 0000 0100\n5 – 0000 0101\n6 – 0000 0110\n7 – 0000 0111\n8 – 0000 1000\n9 – 0000 1001\n10 – 0000 1010\n11 – 0000 1011\n12 – 0000 1100\n13 – 0000 1101\n14 – 0000 1110\n15 – 0000 1111\n16 – 0001 0000</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>So basically when used with Bitwise AND and OR operators, they provide very unique results. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">0000 0001 — 1\nAND\n0000 0010 — 2\n\nresults\n\n0000 0000 = 0</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>while:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">0000 0001 — 1\nOR\n0000 0010 — 2\n\nresults\n\n0000 0011 = 3</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Pretty interesting! Hope this was informative. Happy programming!</p>","timeToRead":2,"frontmatter":{"title":"Using Special Integers with Bitwise Operators for PHP RBAC","code":null,"date":"October 11, 2013"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/articles/using-special-integers-with-bitwise-operators-for-php-rbac/","previous":{"fields":{"slug":"/projects/php-library-for-twitter-api-v1-1/"},"frontmatter":{"title":"PHP library for Twitter API v1.1","permalink":null}},"next":{"fields":{"slug":"/projects/html-form-fields-placeholder-fallback-jquery/"},"frontmatter":{"title":"Form field placeholder fallback support","permalink":null}}}}}