{"componentChunkName":"component---src-templates-post-js","path":"/articles/performance-audits-with-lighthouse-and-gatsbyjs/","result":{"data":{"site":{"siteMetadata":{"title":"Jabran Rafique - Software Engineer (Web)","author":"Jabran Rafique"}},"markdownRemark":{"id":"a2a90a6b-b826-54d6-ba10-e3401d9ce78b","excerpt":"GatsbyJS is a great tool to create static pages. The best part is the integration of different modern technologies together e.g. NodeJS, ReactJS and GraphQL. Aâ€¦","html":"<p>GatsbyJS is a great tool to create static pages. The best part is the integration of different modern technologies together e.g. NodeJS, ReactJS and GraphQL. A combination of those in GatsbyJS gives you set of powerful tools and commands that sets out a world of unlimited opportunities.</p>\n<p>I came across this requirement of integrating performance audits on a GatsbyJS project as part of the Continuous Development(CD) and Continuous Integration(CI) pipelines. <a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse</a> is without a doubt the best tool out there for such purpose.</p>\n<p>Audits are meant to be performed on a production build to reflect more accurate results. Therefore in order to run an audit we must have a production build and being served from a server. GatsbyJS provides options to create a production build and serve it from a local server. These commands are <code class=\"language-text\">gatsby build</code> and <code class=\"language-text\">gatsby serve</code> respectively.</p>\n<p>Normally I would have these as a combined command inside <code class=\"language-text\">npm scripts</code> in <code class=\"language-text\">package.json</code> i.e.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\">...\n\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"develop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby develop\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby build\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"preview\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gatsby build &amp;&amp; gatsby serve\"</span>\n<span class=\"token punctuation\">}</span>\n\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now we can run <code class=\"language-text\">npm run preview</code> in terminal and it will serve the production site at <code class=\"language-text\">http://localhost:9000</code>. Now we can perform an audit using Chrome browser DevTools <code class=\"language-text\">Audit</code> tab which will produce a nice report for us.</p>\n<blockquote>\n<p>There is an excellent guide on this at <a href=\"https://www.gatsbyjs.org/docs/audit-with-lighthouse/\">GatsbyJS docs</a>.</p>\n</blockquote>\n<p>However, in order to have this run in a CD/CI pipeline, we need command-line interface of <code class=\"language-text\">lighthouse</code> that we can install as a node module.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -D lighthouse</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D lighthouse</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Then we can modify our <code class=\"language-text\">npm scripts</code> in <code class=\"language-text\">package.json</code> to include following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\">...\n\n<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  ...\n\n  <span class=\"token property\">\"preview:start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(gatsby build &amp;&amp; (gatsby serve &amp;))\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"preview:stop\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lsof -i tcp:9000 | awk '{print $2}' | grep \\\"[0-9]\\\" | xargs kill -9\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"audit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lighthouse http://localhost:9000\"</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token property\">\"perf:audit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run preview:start ; (npm run audit -- --view &amp;&amp; npm run preview:stop)\"</span>\n<span class=\"token punctuation\">}</span>\n\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>It may already be self-explanatory but here is quick run through:</p>\n<ul>\n<li><code class=\"language-text\">audit</code> runs the <code class=\"language-text\">lighthouse</code> on given URL which in this case is <code class=\"language-text\">http://localhost:9000</code> since GatsbyJS serves the site on port 9000.</li>\n<li><code class=\"language-text\">preview:start</code> is same as <code class=\"language-text\">preview</code> command but with some difference. It makes sure that GatsbyJS serves the site in background and does not block further commands to run.</li>\n<li><code class=\"language-text\">preview:stop</code> basically kills the GatsbyJS service running in the background assuming it is running on port 9000</li>\n<li><code class=\"language-text\">perf:audit</code> runs the combination of above commands to make a build, serve it in the background, run the <code class=\"language-text\">lighthouse</code> audit, opens the report in browser and kills the background service</li>\n</ul>\n<blockquote>\n<p>The <code class=\"language-text\">--view</code> flag to <code class=\"language-text\">lighthouse</code> part will open the report in browser after it is ready.</p>\n</blockquote>\n<h2>Gotcha</h2>\n<p>GatsbyJS will try to serve on port 9000 but if some other process is already using it then it may offer another port to serve. Normally an increment by one e.g. 9001. In such a case, <code class=\"language-text\">lighthouse</code> may fail to run as port 9000 may not be the one serving the GatsbyJS site.</p>\n<h2>Usage in CI pipeline</h2>\n<p>Since <code class=\"language-text\">lighthouse</code> can generate report in different formats including JSON, it can easily be read and evaluated by CI tools. This would be useful for a website with set performance budget so that in a CI pipeline, a build will fail if it does not meet the defined minimum criteria. This is what we are trying to achieve at <a href=\"https://www.ratedpeople.com\">Rated People</a>.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse documentation</a></li>\n<li><a href=\"https://www.gatsbyjs.com\">GatsbyJS documentation</a></li>\n</ul>","timeToRead":3,"frontmatter":{"title":"Performance audits with GatsbyJS and Lighthouse","code":null,"date":"February 05, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/articles/performance-audits-with-lighthouse-and-gatsbyjs/","previous":{"fields":{"slug":"/articles/building-information-platform/"},"frontmatter":{"title":"Building an information platform","permalink":null}},"next":null}}}