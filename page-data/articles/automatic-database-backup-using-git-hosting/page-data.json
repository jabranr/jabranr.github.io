{"componentChunkName":"component---src-templates-post-js","path":"/articles/automatic-database-backup-using-git-hosting/","result":{"data":{"site":{"siteMetadata":{"title":"Jabran Rafique - Software Engineer (Web)","author":"Jabran Rafique"}},"markdownRemark":{"id":"801748fc-a018-57f0-bc41-8e6dd1a63eb4","excerpt":"This walk-through is based on Ubuntu 12LTS+ to backup MySQL databases. It may be usable to backup other type of databases with additional to no tweaks. Use this…","html":"<blockquote>\n<p>This walk-through is based on Ubuntu 12LTS+ to backup MySQL databases. It may be usable to backup other type of databases with additional to no tweaks. Use this as guidelines only and always try on a dummy database before setting it up on a production database. Of course by all means trying it is completely at your own risk.</p>\n</blockquote>\n<p>If your work involves a database or collection of databases there are high chances that you need to create backups on regular basis to make sure you do not loose any valuable data. Setting up an automatic backup task is probably the most easiest way of making sure that everything is in order. One of the ways is to setup a cron job for such a task that would run at specific intervals.</p>\n<p>Another concern in this automated task is to where to store such valuable data and most easy way to restore it when required. Using a private Git respository on one of the services (<a href=\"https://bitbucket.org\">Bitbucket</a> / <a href=\"https://gitlab.com\">GitLab</a> / <a href=\"https://github.com\">Github</a>) is a cheap, secure and efficient way.</p>\n<h2>Setup a cron user</h2>\n<p>Let’s start with creating a special MySQL user called <code class=\"language-text\">cron_user</code> but you can name it anything you like. Login into MySQL by replacing USER with your username:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ mysql -u <span class=\"token environment constant\">USER</span> -p</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Create a new user with password (always use a strong password and make sure to save it to safe place before moving forward):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ CREATE <span class=\"token environment constant\">USER</span> <span class=\"token string\">'cron_user'</span>@<span class=\"token string\">'localhost'</span> IDENTIFIED BY <span class=\"token string\">'someStrongPassword'</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Now grant only specific privileges to this user and flush privileges to bring all changes in effect:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ GRANT SELECT,LOCK TABLES, EVENT, TRIGGER, SHOW VIEW PRIVILEGES ON *.* TO <span class=\"token string\">'cron_user'</span>@<span class=\"token string\">'localhost'</span><span class=\"token punctuation\">;</span>\n$ FLUSH PRIVILEGES<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Our <code class=\"language-text\">cron_user</code> is ready for use now.</p>\n<h2>Setup local and remote repository</h2>\n<p>Now create a fresh empty repository now on any of above mentioned services and name is <code class=\"language-text\">database-backups</code>. Now <code class=\"language-text\">ssh</code> to your server using any Terminal app and make a backup directory at <code class=\"language-text\">/home/backup</code> and <code class=\"language-text\">cd</code> into it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> -p /home/backup/database-backups <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> /home/backup/database-backups</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Create a shell script file and make it executable.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">touch</span> cron_backup.sh\n$ <span class=\"token function\">chmod</span> +x cron_backup.sh</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Add Git and add remote repository.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> init\n$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin <span class=\"token punctuation\">{</span>path/to/remote/database-backups.git<span class=\"token punctuation\">}</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> -A\n$ <span class=\"token function\">git</span> commit -am <span class=\"token string\">'Add files'</span>\n$ <span class=\"token function\">git</span> push -u origin HEAD</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Setup cron script</h2>\n<p>Use any of your favourite editor to edit the file. Here I am using <code class=\"language-text\">nano</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">nano</span> cron_backup.sh</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Add following script, save and exit of editor (CTRL x).</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n<span class=\"token comment\"># Set variables</span>\n<span class=\"token assign-left variable\">DB_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span>\n<span class=\"token assign-left variable\">CRON_USER</span><span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span>\n\n<span class=\"token assign-left variable\">FULLDATE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">\"%Y-%d-%m %H:%M\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">NOW</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">\"%Y-%m-%d-%H-%M\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">MYSQL_DUMP</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">which</span> mysqldump<span class=\"token variable\">`</span></span>\n<span class=\"token assign-left variable\">GIT</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">which</span> <span class=\"token function\">git</span><span class=\"token variable\">`</span></span>\n<span class=\"token assign-left variable\">TEMP_BACKUP</span><span class=\"token operator\">=</span><span class=\"token string\">\"latest_backup.sql\"</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">\"%Y/%m\"</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token comment\"># Check current Git status and update</span>\n<span class=\"token variable\">${GIT}</span> status\n<span class=\"token variable\">${GIT}</span> pull origin HEAD\n\n<span class=\"token comment\"># Dump database</span>\n<span class=\"token variable\">${MYSQL_DUMP}</span> -u <span class=\"token string\">\"<span class=\"token variable\">$CRON_USER</span>\"</span> <span class=\"token variable\">$DB_NAME</span> <span class=\"token operator\">></span> <span class=\"token variable\">$TEMP_BACKUP</span> <span class=\"token operator\">&amp;</span>\n<span class=\"token function\">wait</span>\n\n<span class=\"token comment\"># Make backup directory if not exists (format: {year}/{month}/)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -d <span class=\"token string\">\"<span class=\"token variable\">$BACKUP_DIR</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token function\">mkdir</span> -p <span class=\"token variable\">$BACKUP_DIR</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># Compress SQL dump</span>\n<span class=\"token function\">tar</span> -cvzf <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DB_NAME</span>-<span class=\"token variable\">$NOW</span>-sql.tar.gz <span class=\"token variable\">$TEMP_BACKUP</span>\n\n<span class=\"token comment\"># Remove original SQL dump</span>\n<span class=\"token function\">rm</span> -f <span class=\"token variable\">$TEMP_BACKUP</span>\n\n<span class=\"token comment\"># Add to Git and commit</span>\n<span class=\"token variable\">${GIT}</span> <span class=\"token function\">add</span> -A\n<span class=\"token variable\">${GIT}</span> commit -m <span class=\"token string\">\"Automatic backup - <span class=\"token variable\">$FULLDATE</span>\"</span>\n<span class=\"token variable\">${GIT}</span> push origin HEAD</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Let’s go through what each line does in this script:</p>\n<ul>\n<li><code class=\"language-text\">#!/bin/sh</code> tells that this script will use shell from this path</li>\n<li>Next block sets different values in variables so we can reuse those in script. Here you will only need to update <code class=\"language-text\">DB_NAME</code> for your database name and <code class=\"language-text\">CRON_USER</code> with your specially created cron user name.</li>\n<li><code class=\"language-text\">${GIT} status</code> checks for current status of the repository</li>\n<li><code class=\"language-text\">${GIT} pull</code> performs fetch and pull to get latest from remote</li>\n<li><code class=\"language-text\">${MYSQL_DUMP} -u &quot;$CRON_USER&quot; $DB_NAME &gt; $TEMP_BACKUP &amp; wait</code> performs a MySQL dump and save it as a temporary file.</li>\n<li>Next block of script checks if a directory exists and if not then creates it. To keep the backup structured we setup directories in {year}/{month}/ format.</li>\n<li><code class=\"language-text\">tar -cvzf $BACKUP_DIR/$DB_NAME-$NOW-sql.tar.gz $TEMP_BACKUP</code> compresses and saves the temporary MySQL dump file with dated name. This shall save us a massive amount of space as repository grows bigger with each backup.</li>\n<li><code class=\"language-text\">rm -f $TEMP_BACKUP</code> removes the original MySQL dump file as we do not want duplicates.</li>\n<li>Next block literally adds the newly created backup file to version control and commit with a dated message before it pushes it back to remote.</li>\n</ul>\n<p>Running this short script will dump the specified database, gzip it using <code class=\"language-text\">tar</code> and then add it to a Git repository before updating to remote. But to make this script work, we need to make sure that some settings are in place.</p>\n<h2>Setup <code class=\"language-text\">mysqldump</code> credentials</h2>\n<p>As you may have noticed that you did not have to enter any password for MySQL <code class=\"language-text\">CRON_USER</code>. If we run this script now, it will fail and return an authentication error. We could create user with no password and avoid this error but we should not have a MySQL user interacting with database without an empty or no password – as it would a serious security risk even though this user has limited permissions. To make sure that <code class=\"language-text\">mysqldump</code> does not return an authentication error, let’s create a file <code class=\"language-text\">.my.cnf</code> at user root level.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span>\n$ <span class=\"token function\">nano</span> ~/.my.cnf</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Add following credentials to this file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>mysqldump<span class=\"token punctuation\">]</span>\n<span class=\"token assign-left variable\">user</span><span class=\"token operator\">=</span>CRON_USER_NAME\n<span class=\"token assign-left variable\">password</span><span class=\"token operator\">=</span>CRON_USER_PASSWORD</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>Make sure to update <code class=\"language-text\">CRON_USER_NAME</code> and <code class=\"language-text\">CRON_USER_PASSWORD</code> with correct credentials. Save and exit the editor (CTRL x). Now we have fixed the authentication issue. If we have run the script now by issuing following command, we can see our remote repository being updated with a file of fresh backup.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ ./cron_backup.sh</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Reference: <a href=\"http://stackoverflow.com/questions/9293042/mysqldump-without-the-password-prompt\">Stackoverflow</a></p>\n<h2>Setup cron job</h2>\n<p>Our next step is to setup a cron job so this script runs a specific time automically. Issue following command to edit the cron job file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">$ <span class=\"token function\">crontab</span> -u <span class=\"token environment constant\">USER</span> -e</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Replace <code class=\"language-text\">USER</code> with correct user name who has the permissions to repository and the backup directory. This shall open the cron job file in an editor. Navigate to the end of the file and add following line.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">@daily <span class=\"token builtin class-name\">cd</span> /home/backup/database-backups<span class=\"token punctuation\">;</span> /home/backup/database-backups/cron_backup.sh <span class=\"token operator\">></span> /dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>This line creates a daily cron job for midnight. It will change directory to <code class=\"language-text\">/home/backup/database-backups</code> and then run <code class=\"language-text\">cron_backup.sh</code>.</p>\n<p><a href=\"https://gist.github.com/jabranr/d4939b2b48fdcadc74765a3ed04d8157\">Here is a Gist</a> for cron script.</p>","timeToRead":5,"frontmatter":{"title":"Automatic database backup using Git (Bitbucket/GitLab/Github)","code":null,"date":"April 25, 2016"}}},"pageContext":{"slug":"/articles/automatic-database-backup-using-git-hosting/","previous":{"fields":{"slug":"/articles/first-tech-job/"},"frontmatter":{"title":"Journey from medical education to #FirstTechJob","permalink":null}},"next":{"fields":{"slug":"/articles/css-pseudo-elements/"},"frontmatter":{"title":"CSS pseudo elements","permalink":null}}}},"staticQueryHashes":["3128451518"]}